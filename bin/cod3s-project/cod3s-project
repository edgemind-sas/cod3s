#!/usr/bin/env python3
import argparse
from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import importlib
import cod3s
import logging
import os
import sys
import pkg_resources
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

installed_pkg = {pkg.key
                 for pkg in pkg_resources.working_set}
if 'ipdb' in installed_pkg:
    import ipdb  # noqa: F401



# Utils functions
# ---------------
def load_project(project_state, project_filename, logger=None):

    importlib.reload(cod3s)
    
    project_filename_path = Path(project_filename)
    if project_filename_path.exists():
        try:
            if project_state.get("project"):
                project_state["project"].system.deleteSys()
                
            project_state["project"] = cod3s.COD3SProject.from_yaml(
                file_path=project_filename_path.as_posix(),
                cls_attr="COD3SProject",
            )
        except Exception as e:
            sys.stdout.write(f"Something's wrong when loading COD3S project: {e}")
            sys.exit(1)
    else:
        sys.stdout.write(f"Project file {project_filename_path.as_posix()} doesn't exist")
        sys.exit(1)

    project_state["project"].logger = logger


class ProjectFileChangeHandler(FileSystemEventHandler):
    def __init__(self, project_state, project_filename, logger):
        self.project_filename = project_filename
        self.project_state = project_state
        self.logger = logger

    def on_modified(self, event):
        # Check if the modified file is one of the project files
        if event.src_path in [self.project_state["project"].system_filename,
                              self.project_state["project"].viz_specs_filename]:
            if self.logger:
                self.logger.info(f"{event.src_path} has been modified. Reloading...")
            load_project(self.project_state,
                         self.project_filename,
                         logger=self.logger)


# App config
# ----------
APP_CONFIG = dict(
    app_name_short="cod3s",
    author="Developed by EdgeMind (www.edgemind.net) 2024-",
    version="1.0.0",
    project_filename=os.path.join(os.getcwd(), "project.yaml"),
    verbose_mode=False,
    debug_mode=False,
    log_dir=os.getcwd(),
)


# CLI parameters management
# -------------------------
APP_ARG_PARSER = argparse.ArgumentParser(
    description=APP_CONFIG["app_name_short"] + " " + APP_CONFIG["version"])

APP_ARG_PARSER.add_argument(
    '-j', '--project-filename',
    dest='project_filename',
    action='store',
    default=APP_CONFIG["project_filename"],
    help='COD3S Project filename.')

# APP_ARG_PARSER.add_argument(
#     '-m', '--multithreading',
#     dest='multithreading',
#     action='store_true',
#     default=False,
#     help='Indicate if multithreading is enable for parameters study')

# APP_ARG_PARSER.add_argument(
#     '-C', '--clean-db',
#     dest='clean_db',
#     action='store_true',
#     default=False,
#     help='Reset DB.')

APP_ARG_PARSER.add_argument(
    '-P', '--port',
    dest='port',
    action='store',
    default=8000,
    help='COD3S Project filename.')


APP_ARG_PARSER.add_argument(
    '-p', '--progress',
    dest='progress_mode',
    action='store_true',
    default=APP_CONFIG.get("progress_mode", False),
    help='Show progress bar in the console.')

APP_ARG_PARSER.add_argument(
    '-v', '--verbose',
    dest='verbose_mode',
    action='store_true',
    default=APP_CONFIG.get("verbose_mode", False),
    help='Display log information on stardard output.')

APP_ARG_PARSER.add_argument(
    '-d', '--debug',
    dest='debug_mode',
    action='store_true',
    default=APP_CONFIG.get("debug_mode", False),
    help='Display debug on stardard output.')


APP_INPUT_ARGS = APP_ARG_PARSER.parse_args()

APP_CONFIG.update(vars(APP_ARG_PARSER.parse_args()))

PROJECT_STATE = {
    "project": None, 
}

load_project(PROJECT_STATE, APP_CONFIG.get("project_filename"))

app = FastAPI()

# Logging configuration
logger = None
if APP_CONFIG.get("verbose_mode") or APP_CONFIG.get("debug_mode"):
    logger = logging.getLogger(__name__)
    if APP_CONFIG.get("verbose_mode"):
        logger.setLevel(logging.INFO)
    if APP_CONFIG.get("debug_mode"):
        logger.setLevel(logging.DEBUG)

    log_filename = os.path.join(APP_CONFIG.get("log_dir", "."), "project.log")
    file_handler = logging.FileHandler(log_filename)
    console_handler = logging.StreamHandler()
    formatter = logging.Formatter('[%(asctime)s][%(name)s][%(levelname)s]\n%(message)s')
    console_handler.setFormatter(formatter)
    file_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)

@app.get("/", tags=["Root"])
async def read_root():
    return {"message": "Welcome to this fantastic app!"}


@app.post("/reload_project/")
async def reload_project():
    
    load_project(PROJECT_STATE, APP_CONFIG["project_filename"])

    PROJECT_STATE["project"].update_ts_last_modification()
    
    return {
        "message": "Project reloaded",
        "project": PROJECT_STATE["project"].dict(),
    }


@app.get("/project/")
async def get_project_info():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    return {
        "project": PROJECT_STATE["project"].dict(),
    }


@app.get("/components/")
async def get_components():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    res = []
    for comp in PROJECT_STATE["project"].system.components("#.*", "#.*"):
        comp_cur = {
            "cls": comp.className(),
            "name": comp.name(),
            }
        res.append(comp_cur)

    return {
        "components": res,
    }


@app.post("/add_indicator/")
async def add_indicator(indic_specs=Body(...)):
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    # Call the add_indicator_var method with the parameters from the request
    indic_added = PROJECT_STATE["project"].system.add_indicator_var(**indic_specs)
    
    # Depending on the behavior of your add_indicator_var method,
    # you might need to return something or just confirm that the action was performed successfully.
    PROJECT_STATE["project"].update_ts_last_modification()

    return {
        "message": "Indicator(s) added successfully",
        "indicators": [indic.dict(exclude={"bkd", "values", "instants"})
                       for indic in indic_added],
    }


@app.post("/simulate/")
async def simulate(simu_params=Body(...)):
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    # Load default parameters
    #system_model.loadParameters("system_params.xml")
    start_time = time.perf_counter()
    PROJECT_STATE["project"].system.simulate(**simu_params)
    end_time = time.perf_counter()
    process_time = end_time - start_time
    # Depending on the behavior of your add_indicator_var method,
    # you might need to return something or just confirm that the action was performed successfully.
    PROJECT_STATE["project"].update_ts_last_modification()

    return {"message": "Simulation ended successfully",
            "process_time": process_time}


@app.post("/interactive_simulation/start/")
async def interactive_simulation_start():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    PROJECT_STATE["project"].system.startInteractive()
    PROJECT_STATE["project"].system.stepForward()

    transitions = PROJECT_STATE["project"].system.fireable_transitions()

    PROJECT_STATE["project"].update_ts_last_modification()

    return {"message": "Interactive simulation started",
            "current_time": PROJECT_STATE["project"].system.currentTime(),
            "transitions": transitions}


@app.post("/interactive_simulation/stop/")
async def interactive_simulation_start():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    PROJECT_STATE["project"].system.stopInteractive()

    PROJECT_STATE["project"].update_ts_last_modification()

    return {"message": "Interactive simulation stopped"}


# @app.post("/interactive_simulation/forward/")
# async def interactive_simulation_forward():
#     if not PROJECT_STATE["project"]:
#         raise HTTPException(status_code=404, detail="Project invalid")

#     PROJECT_STATE["project"].system.stepForward()

#     transitions = PROJECT_STATE["project"].system.fireable_transitions()

#     PROJECT_STATE["project"].update_ts_last_modification()

#     return {"current_time": PROJECT_STATE["project"].system.currentTime(),
#             "transitions": transitions}


@app.post("/interactive_simulation/backward/")
async def interactive_simulation_backward():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    PROJECT_STATE["project"].system.stepBackward()

    transitions = PROJECT_STATE["project"].system.fireable_transitions()

    PROJECT_STATE["project"].update_ts_last_modification()

    return {"current_time": PROJECT_STATE["project"].system.currentTime(),
            "transitions": transitions}


@app.get("/interactive_simulation/active_transitions/")
async def interactive_simulation_active_transitions():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    transitions, end_time_bound = PROJECT_STATE["project"].system.active_transitions()
    
    return {
        "current_time": PROJECT_STATE["project"].system.currentTime(),
        "transitions": transitions,
        }


@app.get("/interactive_simulation/fireable_transitions/")
async def interactive_simulation_fireable_transitions():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    transitions = PROJECT_STATE["project"].system.fireable_transitions()
    
    return {
        "current_time": PROJECT_STATE["project"].system.currentTime(),
        "transitions": transitions,
        }


@app.post("/interactive_simulation/forward/")
async def interactive_simulation_forward(transition_id: int = None,
                                         date: float = None,
                                         state_index: int = None):
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    try:
        if transition_id:
            PROJECT_STATE["project"].system.set_transition(
                transition_id, date=date, state_index=state_index)
        else:
            PROJECT_STATE["project"].system.stepForward()

        transitions = PROJECT_STATE["project"].system.fireable_transitions()

        PROJECT_STATE["project"].update_ts_last_modification()

        return {
            "current_time": PROJECT_STATE["project"].system.currentTime(),
            "active_transitions": transitions,
        }
    
    except IndexError:
        raise HTTPException(status_code=404, detail=f"Transition {transition_id} not found")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/system_viz/")
async def get_system_viz(update_only: bool = False):
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    system_viz = PROJECT_STATE["project"].get_system_viz()

    return system_viz


@app.post("/update_viz/")
async def update_viz():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    system_viz_update, system_viz_new = \
        PROJECT_STATE["project"].get_system_viz_updates()

    PROJECT_STATE["project"].system_viz_current = system_viz_new
    
    return system_viz_update


@app.get("/ts_last_modification/")
async def get_ts_last_modification():
    if not PROJECT_STATE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    return {
        "ts_last_modification": PROJECT_STATE["project"].ts_last_modification
    }


app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":

    import uvicorn

   # Set up event handler and observer
    event_handler = ProjectFileChangeHandler(
        PROJECT_STATE,
        APP_CONFIG["project_filename"],
        logger)
    observer = Observer()
    observer.schedule(event_handler,
                      path=PROJECT_STATE["project"].system_filename,
                      recursive=False)
    observer.schedule(event_handler,
                      path=PROJECT_STATE["project"].viz_specs_filename,
                      recursive=False)
    observer.start()

    try:
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=int(APP_CONFIG.get("port"))
        )
    finally:
        observer.stop()
        observer.join()

    # uvicorn.run(
    #     app,
    #     host="0.0.0.0",
    #     port=int(APP_CONFIG.get("port"))
    # )
