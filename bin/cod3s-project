#!/usr/bin/env python3

"""
COD3S Project Server Script.

This script sets up and serves the COD3S web server using FastAPI. It includes API endpoints
for managing, simulating, and visualizing a given system project. CLI arguments can configure
the server, including the project YAML file path and server port. Filesystem event handling
enables automatic project reloads when file changes are detected.

Features/API Endpoints:
- Root (`/`): Provides a basic welcome message.
- Project Management (`/reload_project/`): Reloads project configuration from the specified YAML file.
- Project Information (`/project/`, `/ts_last_modification/`): Retrieves state and last modification timestamp.
- Project Configuration (`/front_cfg/`): Fetches front-end configuration.
- Component Management (`/components/`, `/add_indicator/`): Manages system components and indicators.
- Simulation (`/simulate/`): Carries out a system simulation with specified parameters.
- Interactive Simulation: Start, stop, and manipulate step-by-step simulation process.
- Visualization (`/system_viz/`, `/positions_update/`, `/system_viz_update/`): Manages system visualization.

Run this script directly to start the server with `uvicorn`. CLI options allow you to specify
the project file among other configurations.

Usage:
    $ ./cod3s_project.py [-j <project_filename>] [-P <port>] [-v] [-d]

CLI Arguments:
    -j, --project-filename: COD3S Project filename (default: 'project.yaml' in current working directory).
    -P, --port: Port number for the server to listen on (default: 8000).
    -p, --progress: Enable progress mode, showing progress bar in the console.
    -v, --verbose: Enable verbose mode, displaying log information on standard output.
    -d, --debug: Enable debug mode, displaying debug information on standard output.

Requires: `fastapi`, `watchdog`, `importlib`, `uvicorn`, `argparse`, `logging`, `os`, `sys`
Optional: `ipdb` for debugging purposes if installed.
"""
import uvicorn
import argparse
from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
# import importlib
import cod3s
# import Pycatshoo
import logging
import os
import sys
import pkg_resources
import time
import uuid
import pandas as pd
import numpy as np
from subprocess import Popen, PIPE

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

installed_pkg = {pkg.key
                 for pkg in pkg_resources.working_set}
if 'ipdb' in installed_pkg:
    import ipdb  # noqa: F401



# Utils functions
# ---------------
def load_project(store: dict, project_filename: str,
                 data_extra: dict = {}, logger=None):
    """Loads or reloads the COD3S project from a YAML file and updates the project state.

    This function imports the COD3S package, reads the project definition from the project
    YAML file, and updates the 'project' key in the `project_state` dictionary. If there
    is an existing project, it ensures that the system is properly deleted before loading
    the new one to avoid memory leaks or other issues.

    Args:
        store (dict): A dictionary containing the state of the project, including
                              the current project instance under the 'project' key.
        project_filename (str): The path to the YAML file containing the project definition.
        data_extra (dict): A dictionary with additional data for the project loading function.
        logger (logging.Logger, optional): A logger to output messages during the project
                                           loading operations.

    Raises:
        SystemExit: If the project file does not exist or another error occurs during project
                    loading, log the error message and exit the program.
    """

    # importlib.reload(cod3s)
    # importlib.reload(Pycatshoo)
    
    project_filename_path = Path(project_filename)
    if project_filename_path.exists():
        if store.get("project"):
            if store["project"].system:
                store["project"].system.deleteSys()

        store["project"] = cod3s.COD3SProject.from_yaml(
            file_path=project_filename_path.as_posix(),
            cls_attr="COD3SProject",
            data=data_extra,
        )

        store["project"].logger = logger

        # Create config directory if not exist
        cfg_dir_path = os.path.join(
            store["project"].project_path,
            store["project"].cfg_dir,
            )
        Path(cfg_dir_path).mkdir(exist_ok=True)

    else:
        sys.stdout.write(f"Project file {project_filename_path.as_posix()} doesn't exist")
        sys.exit(1)

        
def run_simulation_in_subprocess(
        project: cod3s.COD3SProject,
        simu_params: cod3s.PycMCSimulationParam,
        session_id: str):

    # Force system init to simulate
    project.init_config.skip_system_init = False
    project_main_json = project.json()
    simu_params_json = simu_params.json()
    
    command = [
        "cod3s-simulate",
        "--simu-params", simu_params_json,
        "--project", project_main_json,
        "--session-id", session_id
    ]
    
    process = Popen(command, stdout=PIPE, stderr=PIPE, text=True)
    stdout, stderr = process.communicate()

    return process, stdout, stderr

        
def transition_to_indexed_dict(transitions):
    """Converts a list of transition objects to a list of dictionaries with indexed IDs.

    Each transition object in the input list is converted to a dictionary. An index is
    added to each dictionary representing the transition's ID. If a transition is None,
    it is skipped.

    Args:
        transitions (list): A list of transition objects that have a `dict()` method.

    Returns:
        list of dict: A list of dictionaries, each with a 'trans_id' key representing the
                      transition's ID and the keys from the transition object's dictionary
                      representation.

    Example:
        >>> transition_to_indexed_dict([Transition(...), None, Transition(...)])
        [{'trans_id': 0, ...}, {'trans_id': 2, ...}]
    """
    return [dict(trans_id=i, **trans.dict())
            for i, trans in enumerate(transitions) if trans]


class ProjectFileChangeHandler(FileSystemEventHandler):
    """Handler for filesystem events that affect the project file.

    This class is a watchdog event handler that reloads the project when the project file
    or its associated files are modified.

    Attributes:
        project_filename (str): The path to the main project YAML file.
        project_state (dict): A dictionary to hold the state of the project.
        logger (logging.Logger): A logger for logging the file modification event.

    Methods:
        on_modified: Responds to the 'modified' event for the project files.
    """

    def __init__(self,
                 project_state: dict,
                 project_filename: str,
                 logger: None):
        """Initializes the event handler with the current project state and logger.

        Args:
            project_state (dict): A dictionary containing the current state of the project.
            project_filename (str): The path to the project YAML file.
            logger (logging.Logger): A logger to output log messages.
        """

        self.project_filename = project_filename
        self.project_state = project_state
        self.logger = logger

    def on_modified(self, event):
        # Check if the modified file is one of the project files
        if event.src_path in [self.project_state["project"].system_filename,
                              self.project_state["project"].viz_specs_filename]:
            if self.logger:
                self.logger.info(f"{event.src_path} has been modified. Reloading...")
            load_project(self.project_state,
                         self.project_filename,
                         logger=self.logger)


# App config
# ----------
APP_CONFIG = dict(
    app_name_short="cod3s-project",
    author="Developed by EdgeMind (www.edgemind.net) 2024-",
    version="1.0.0",
    project_filename=os.path.join(os.getcwd(), "project.yaml"),
    verbose_mode=False,
    debug_mode=False,
    log_dir=os.getcwd(),
)


# CLI parameters management
# -------------------------
APP_ARG_PARSER = argparse.ArgumentParser(
    description=APP_CONFIG["app_name_short"] + " " + APP_CONFIG["version"])

APP_ARG_PARSER.add_argument(
    '-j', '--project-filename',
    dest='project_filename',
    action='store',
    default=APP_CONFIG["project_filename"],
    help='COD3S Project filename.')

# APP_ARG_PARSER.add_argument(
#     '-m', '--multithreading',
#     dest='multithreading',
#     action='store_true',
#     default=False,
#     help='Indicate if multithreading is enable for parameters study')

# APP_ARG_PARSER.add_argument(
#     '-C', '--clean-db',
#     dest='clean_db',
#     action='store_true',
#     default=False,
#     help='Reset DB.')

APP_ARG_PARSER.add_argument(
    '--state-less',
    dest='state_less',
    action='store_true',
    default=False,
    help='Run the server in state-less mode without loading PROJECT_STATE.'
)

APP_ARG_PARSER.add_argument(
    '-P', '--port',
    dest='port',
    action='store',
    default=8000,
    help='COD3S Project filename.')


APP_ARG_PARSER.add_argument(
    '-p', '--progress',
    dest='progress_mode',
    action='store_true',
    default=APP_CONFIG.get("progress_mode", False),
    help='Show progress bar in the console.')

APP_ARG_PARSER.add_argument(
    '-v', '--verbose',
    dest='verbose_mode',
    action='store_true',
    default=APP_CONFIG.get("verbose_mode", False),
    help='Display log information on stardard output.')

APP_ARG_PARSER.add_argument(
    '-d', '--debug',
    dest='debug_mode',
    action='store_true',
    default=APP_CONFIG.get("debug_mode", False),
    help='Display debug on stardard output.')


APP_INPUT_ARGS = APP_ARG_PARSER.parse_args()

APP_CONFIG.update(vars(APP_ARG_PARSER.parse_args()))

APP_STORE = {
    "project": None,
}


# load_project(PROJECT_STATE, APP_CONFIG.get("project_filename"))

app = FastAPI()

# Logging configuration
logger = None
if APP_CONFIG.get("verbose_mode") or APP_CONFIG.get("debug_mode"):
    logger = logging.getLogger(__name__)
    if APP_CONFIG.get("verbose_mode"):
        logger.setLevel(logging.INFO)
    if APP_CONFIG.get("debug_mode"):
        logger.setLevel(logging.DEBUG)

    log_filename = os.path.join(APP_CONFIG.get("log_dir", "."), "project.log")
    file_handler = logging.FileHandler(log_filename)
    console_handler = logging.StreamHandler()
    formatter = logging.Formatter('[%(asctime)s][%(name)s][%(levelname)s]\n%(message)s')
    console_handler.setFormatter(formatter)
    file_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)

@app.get("/", tags=["Root"])
async def read_root():
    return {"message": "Welcome to {APP_CONFIG['app_name']} API"}


@app.post("/reload_project/", tags=["Project Management"])
async def reload_project(data_extra: dict = {}):
    """Reloads the current project with additional data.

    Calls the `load_project` function and passes any additional data provided in the request to update the project settings.
    
    Args:
        data_extra (dict, optional): A dictionary of additional data to pass to the project loading function.
    
    Returns:
        dict: A confirmation message and a snapshot of the new project state.
    
    Raises:
        HTTPException: If the project cannot be reloaded, an HTTP error is raised.
    """
    load_project(APP_STORE, APP_CONFIG["project_filename"], data_extra=data_extra)
    APP_STORE["project"].update_ts_last_modification()
    return {
        "message": "Project reloaded",
        "project": APP_STORE["project"].dict(),
    }


@app.get("/project/", tags=["Project Information"])
async def get_project_info():
    """
    Fetches project information.

    Returns a dictionary with a snapshot of the current project's state.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    return {
        "project": APP_STORE["project"].dict(),
    }


@app.get("/components/", tags=["Component Management"])
async def get_components(name: str = ".*"):
    """
    Lists all components matching a given regular expression.

    Args:
        name (str, optional): Regular expression pattern used to filter components by name.
                              Defaults to ".*" (all components).

    Returns:
        A list containing the description of each component matching the regex pattern.
    Raises:
        HTTPException: If the project state is invalid, an HTTP 404 error is raised.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    res = [comp.describe() for comp in
           APP_STORE["project"].system.get_components(name).values()]
    return {
        "components": res,
    }


@app.post("/add_indicator/", tags=["Indicator Management"])
async def add_indicator(indic_specs=Body(...)):
    """
    Adds a new indicator based on specifications.

    Accepts indicator specifications and adds the indicator to the system.
    Returns confirmation of the addition and the added indicators stripped of
    backend-specific details.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    indic_added = APP_STORE["project"].system.add_indicator_var(**indic_specs)
    APP_STORE["project"].update_ts_last_modification()
    return {
        "message": "Indicator(s) added successfully",
        "indicators": [indic.dict(exclude={"bkd", "values", "instants"})
                       for indic in indic_added],
    }


@app.post("/simulation/run/", tags=["Simulation"])
async def simulation_run(simu_params: cod3s.PycMCSimulationParam,
                         session_id: str = Body(default=None)):
    """
    Initiates a COD3S simulation process with the given parameters in a new environment.

    This endpoint takes the simulation parameters and an optional session ID as inputs. 
    It generates a unique session ID if one is not provided. The simulation parameters and 
    the project's current state are serialized into JSON and passed as arguments to the 
    `cod3s-simulate` CLI script. The script is expected to be in the system PATH or located 
    in the same directory as this endpoint's module.

    The `cod3s-simulate` script runs the simulation in a separate process or environment, 
    ensuring that if the system's state can only exist once per Python session, it is handled 
    properly. The script is responsible for deserializing the parameters, re-creating the 
    project and simulation instances, and initiating the simulation.

    Args:
        simu_params (PycMCSimulationParam): A Pydantic model containing the parameters for the simulation.
        session_id (str, optional): A unique identifier to associate with this simulation session. If not 
                                    provided, a UUID will be generated.

    Raises:
        HTTPException: If the project state is invalid (HTTP status 404) or if the subprocess 
                       encounters an error (HTTP status 500).

    Returns:
        dict: A dictionary with a single key `session_id` corresponding to the session ID 
              of the initiated simulation.

    Example:
        POST /simulation/run/
        Body: {
            "simu_params": { 
                "nb_runs": 10,
                "schedule": [{"start": 0.0, "end": 10.0, "nvalues": 5}],
                "time_unit": "seconds",
                "seed": 42
            },
            "session_id": "optional-custom-session-id"
        }
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project not loaded")

    # Create a unique simulation session ID if none provided
    session_id = session_id or str(uuid.uuid4())[:8]

    process, stdout, stderr = \
        run_simulation_in_subprocess(APP_STORE["project"],
                                     simu_params,
                                     session_id)

    if process.returncode != 0:
        # Handle errors if the simulation failed
        raise HTTPException(status_code=500, detail=stderr)
    
    return {"session_id": session_id}


@app.post("/simulation/run_stateless/", tags=["Simulation"])
async def simulation_run_stateless(project: dict,
                                   simu_params: cod3s.PycMCSimulationParam):

    if APP_STORE["project"]:
        cod3s.update_dict_deep(project, APP_STORE["project"].dict())
        
    # Because we run stateless
    project["init_config"] = {"skip_system_init": True}
    project = cod3s.COD3SProject(**project)
        
    session_id = str(uuid.uuid4())[:8]
    
    process, stdout, stderr = \
        run_simulation_in_subprocess(
            project, simu_params, session_id)

    if process.returncode != 0:
        # Handle errors if the simulation failed
        raise HTTPException(status_code=500, detail=stderr)
    
    return {"session_id": session_id}


@app.get("/simulation/indicators/", tags=["Simulation"])
async def get_simulation_indicators(session_id: str):
    """
    Retrieves indicators from a session-specific 'indicators.csv' file and returns the data as JSON.

    Looks for an 'indicators.csv' file in the directory corresponding to the provided session_id, 
    reads the CSV file, and returns the data as JSON records.

    Args:
        session_id (str): The identifier for the simulation session.
    
    Returns:
        JSON: A JSON representation of the records in 'indicators.csv'.

    Raises:
        HTTPException: If the project state is invalid, the session_id does not exist, 
                       or the 'indicators.csv' file is not found, or if there is an error 
                       reading the CSV file.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    project = APP_STORE["project"]
    session_dir = Path(project.project_path) / project.cfg_dir / f"simulation.{session_id}"
    indicators_csv = session_dir / "indicators.csv"

    if not indicators_csv.exists():
        raise HTTPException(status_code=404, detail="Indicators file not found")

#    try:
    # Reading the CSV file into a pandas DataFrame and converting to JSON
    df = pd.read_csv(indicators_csv)

    # Converting NaN values to None for JSON serialization
    df.replace(np.nan, None, inplace=True)

    records = df.to_dict(orient='records')

    return records
    # except Exception as e:
    #     raise HTTPException(status_code=500, detail=str(e))


@app.post("/interactive_simulation/start/", tags=["Interactive Simulation"])
async def interactive_simulation_start():
    """
    Initiates interactive simulation.

    Starts the interactive simulation, retrieves fireable transitions, updates the 
    project modification timestamp, and returns relevant information.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    APP_STORE["project"].system.isimu_start()
    transitions = APP_STORE["project"].system.isimu_fireable_transitions()
    #PROJECT_STATE["project"].update_ts_last_modification()
    return {"message": "Interactive simulation started",
            "current_time": APP_STORE["project"].system.currentTime(),
            "transitions": transition_to_indexed_dict(transitions)}


@app.post("/interactive_simulation/stop/", tags=["Interactive Simulation"])
async def interactive_simulation_stop():
    """
    Stops interactive simulation.

    Ends the interactive simulation and updates the project's last
    modification timestamp.
    Returns a message indicating that the interactive simulation has stopped.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    APP_STORE["project"].system.isimu_stop()
    #PROJECT_STATE["project"].update_ts_last_modification()
    return {"message": "Interactive simulation stopped"}


@app.post("/interactive_simulation/backward/", tags=["Interactive Simulation"])
async def interactive_simulation_backward():
    """
    Moves the interactive simulation one step backward.

    Reverts the simulation state by one step, retrieves the current state of the system, 
    including fireable transitions, and returns updated information.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    trans_removed = APP_STORE["project"].system.isimu_step_backward()
    transitions = APP_STORE["project"].system.isimu_fireable_transitions()
    #PROJECT_STATE["project"].update_ts_last_modification()
    return {
        "current_time": APP_STORE["project"].system.currentTime(),
        "transitions": transition_to_indexed_dict(transitions),
        "transitions_removed": [trans.dict() for trans in trans_removed],
    }


@app.get("/interactive_simulation/active_transitions/", tags=["Interactive Simulation"])
async def interactive_simulation_active_transitions():
    """
    Retrieves currently active transitions in the interactive simulation.

    Returns the current time and a list of active transitions.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    transitions = APP_STORE["project"].system.isimu_active_transitions()
    return {
        "current_time": APP_STORE["project"].system.currentTime(),
        "transitions": [trans.dict() for trans in transitions],
    }


@app.get("/interactive_simulation/fireable_transitions/", tags=["Interactive Simulation"])
async def interactive_simulation_fireable_transitions():
    """
    Retrieves transitions that can be fired in the current state of interactive simulation.

    Returns the current time and a list of fireable transitions.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    transitions = APP_STORE["project"].system.isimu_fireable_transitions()
    return {
        "current_time": APP_STORE["project"].system.currentTime(),
        "transitions": transition_to_indexed_dict(transitions),
    }


@app.get("/interactive_simulation/sequence/", tags=["Interactive Simulation"])
async def interactive_simulation_sequence():
    """
    Fetches the sequence of events in the interactive simulation.

    Returns the current time and the sequence of transitions that have occurred in the simulation.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    return {
        "current_time": APP_STORE["project"].system.currentTime(),
        "sequence": APP_STORE["project"].system.isimu_sequence.dict(),
    }


@app.post("/interactive_simulation/forward/", tags=["Interactive Simulation"])
async def interactive_simulation_forward(transition_id: int = None, date: float = None, state_index: int = None):
    """
    Advances interactive simulation by firing a transition.

    Optionally accepts a transition ID, date, and state index to guide the simulation step.
    Returns the current system time, a list of now fireable transitions, and a list of the 
    transitions that were fired.
    Raises an HTTP 404 error if the project state is invalid or if the specified transition was not found.
    Raises an HTTP 500 error for any other unexpected error.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    try:
        if transition_id is not None:
            APP_STORE["project"].system.isimu_set_transition(transition_id, date=date, state_index=state_index)
        trans_fired = APP_STORE["project"].system.isimu_step_forward()
        transitions = APP_STORE["project"].system.isimu_fireable_transitions()
        #PROJECT_STATE["project"].update_ts_last_modification()
        return {
            "current_time": APP_STORE["project"].system.currentTime(),
            "transitions": transition_to_indexed_dict(transitions),
            "transitions_fired": [trans.dict() for trans in trans_fired],
        }
    except IndexError:
        raise HTTPException(status_code=404, detail=f"Transition {transition_id} not found")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/system_viz/", tags=["Visualization"])
async def get_system_viz(update_only: bool = False):
    """
    Retrieves the system visualization data.

    If 'update_only' is True, only the updates since the last request will be returned.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    system_viz = APP_STORE["project"].get_system_viz()
    return system_viz


@app.post("/system_viz_update/", tags=["Visualization"])
async def system_viz_update():
    """
    Updates the visualization representation of the system.

    Calculates the differences between the current and new visualization data, updates the 
    project's current visualization state, and returns the visualization updates.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    system_viz_update, system_viz_new = APP_STORE["project"].get_system_viz_updates()
    APP_STORE["project"].system_viz_current = system_viz_new
    return system_viz_update


@app.get("/ts_last_modification/", tags=["Project Information"])
async def get_ts_last_modification():
    """
    Obtains the timestamp of the last modification to the project.

    Returns a dictionary with the key 'ts_last_modification' showing the precise time of the last project update.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    return {
        "ts_last_modification": APP_STORE["project"].ts_last_modification
    }

@app.get("/front_cfg/", tags=["Project Configuration"])
async def get_front_cfg():
    """
    Retrieves front-end configuration.

    Gets the configuration used by the front-end client of the project.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    return APP_STORE["project"].front_cfg

@app.post("/front_cfg/positions/", tags=["Visualization"])
async def front_cfg_positions_update(positions: dict):
    """
    Updates the positions of components or connections in the visualization.

    Accepts a dictionary representing the new positions of various elements and updates 
    the project's configuration.
    Returns a confirmation message after the positions are updated.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    APP_STORE["project"].update_positions(positions)
    APP_STORE["project"].write_front_cfg()
    return {
        "message": "Positions updated",
    }


@app.post("/front_cfg/layout/", tags=["Configuration"])
async def front_config_layout_update(data: dict = Body(...)):
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    APP_STORE["project"].front_cfg_layout_update(data)
    # Save the updated config
    APP_STORE["project"].write_front_cfg()

    return {
        "message": "Front-end configuration updated",
#        "layout": PROJECT_STATE["project"].front_cfg['layout'],
    }

@app.get("/front_cfg/layout/", tags=["Configuration"])
async def front_config_layout():
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")

    layout_config = APP_STORE["project"].front_cfg.get('layout', {})
    return {"layout": layout_config}



@app.post("/break_point/", tags=["Debugging"])
async def break_point():
    """
    Debugging-only endpoint to trigger a breakpoint.

    Triggers an IPDB breakpoint in the server process for debugging purposes.
    Raises an HTTP 404 error if the project state is invalid.
    """
    if not APP_STORE["project"]:
        raise HTTPException(status_code=404, detail="Project invalid")
    system = APP_STORE["project"].system
    ipdb.set_trace()


app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    """
    Main entry point of the application.

    Sets up a file system observer to watch for changes to the project files and starts the
    FastAPI app server. When the server shuts down, the observer is also stopped and
    joined to ensure a clean exit.

    Note:
        This block will only be executed if the script is run as the main program.
    """

    if APP_CONFIG["state_less"]:
        load_project(APP_STORE,
                     APP_CONFIG.get("project_filename"),
                     data_extra={
                         "init_config": {"skip_system_init": True},
                         })

    else:
        load_project(APP_STORE, APP_CONFIG.get("project_filename"))

        # Set up event handler and observer
        event_handler = ProjectFileChangeHandler(
            APP_STORE,
            APP_CONFIG["project_filename"],
            logger)
        observer = Observer()

        # Monitor the project files for changes
        observer.schedule(event_handler,
                          path=APP_STORE["project"].system_filename,
                          recursive=False)
        observer.schedule(event_handler,
                          path=APP_STORE["project"].viz_specs_filename,
                          recursive=False)

        # Start the file system observer
        observer.start()
        observer.stop()
        observer.join()



    # Start the FastAPI server
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=int(APP_CONFIG.get("port"))
    )
